Lag et GUI-grensesnitt for dette spilletl Jeg vil du skal bruke awt og swing.
Filene skal være Celle.java, Rutenett.java, Verden.java, View.java,
Controller.java og Hovedprogram.java. Ikke endre på Celle.java, Rutenett.java og
Verden.java, men lag filene View.java, Controller.java og Hovedprogram.java.
Sørg for at alt funker og spillet kan kjøre.

Celle.java:
```java
// Klasse Celle
public class Celle {
    boolean levende;
    Celle[] naboer = new Celle[8];
    int antNaboer = 0;
    int antLevendeNaboer = 0;

    // Konstruktor
    public Celle() {
        levende = false;
    }

    // Sett status til død
    public void settDoed() {
        levende = false;
    }

    // Sett status til død
    public void settLevende() {
        levende = true;
    }

    // Sjekk om celle lever
    public boolean erLevende() {
        return levende;
    }

    // Hent status-tegn
    public char hentStatusTegn() {
        if (levende) {
            return 'O';
        }
        else {
            return '.';
        }
    }

    // Legg til nabocelle
    public void leggTilNabo(Celle celle) {
        boolean lagtTil = false;
        for (int i = 0; i < 8; i++) {
            if (!lagtTil && naboer[i] == null) {
                naboer[i] = celle;
                antNaboer++;
                lagtTil = true;
            }
        }
    }

    // Tell antall levende naboceller
    public void tellLevendeNaboer() {
        int teller = 0;
        for (Celle i : naboer) {
            if (i != null) {
                if (i.erLevende()) {
                    teller++;
                }
            }
        }
        antLevendeNaboer = teller;
    }

    // Oppdater cellens status
    public void oppdaterStatus() {
        if (antLevendeNaboer == 3) {
            levende = true;
        }
        else if (antLevendeNaboer != 2) {
            levende = false;
        }
    }
}



```


Rutenett.java:
```java
// Klasse Rutenett
public class Rutenett {
    int antRader;
    int antKolonner;
    Celle[][] rutene;

    // Konstruktor
    public Rutenett(int antRader, int antKolonner) {
        this.antRader = antRader;
        this.antKolonner = antKolonner;
        rutene = new Celle[antRader][antKolonner];
    }

    // Lager celle og legger til i rutenettet
    public void lagCelle(int rad, int kolonne) {
        Celle celle = new Celle();

        // 1/3 sjanse for at cellen lever
        if (Math.random() <= 0.333) {
            celle.settLevende();
        }

        rutene[rad][kolonne] = celle;
    }

    // Legg til tilfeldige celler i rutenettet
    public void fyllMedTilfeldigeCeller() {
        for (int i = 0; i < antRader; i++) {
            for (int j = 0; j < antKolonner; j++) {
                lagCelle(i, j);
            }
        }
    }

    // Returner en celle hvis koordinatene gitt finnes
    public Celle hentCelle(int rad, int kolonne) {
        if ((rad > -1 && rad < antRader) && (kolonne > -1 && kolonne < antKolonner)) {
            Celle celle = rutene[rad][kolonne];
            return celle;
        }
        else {
            return null;
        }
    }

    // Skriver ut rutenettet til terminal
    public void tegnRutenett() {

        for (int i = 0; i < antRader; i++) {
            System.out.print("+---");
        }

        System.out.println("+");
        for (int i = 0; i < antRader; i++) {
            System.out.print("| ");
            for (int j = 0; j < antKolonner; j++) {
                Celle myBroCelle = rutene[i][j];
                System.out.print(myBroCelle.hentStatusTegn());
                System.out.print(" | ");
            }

            System.out.println();
            for (int k = 0; k < antRader; k++) {
                System.out.print("+---");
            }

            System.out.println("+");
        }
    }

    // Sett alle naboene til en celle
    public void settNaboer(int rad, int kolonne) {
        Celle celle = rutene[rad][kolonne];
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                if (i != 0 || j != 0) {
                    Celle nabocelle = hentCelle(rad + i, kolonne + j);
                    if (nabocelle != null) {
                        celle.leggTilNabo(nabocelle);
                    }
                }
            }
        }
    }

    // Setter alle naboer til alle celler
    public void kobleAlleCeller() {
        for (int i = 0; i < antRader; i++) {
            for (int j = 0; j < antKolonner; j++) {
                settNaboer(i, j);
            }
        }
    }

    // Returner antall levende celler
    public int antallLevende() {
        int antLevendeCeller = 0;
        for (int i = 0; i < antRader; i++) {
            for (int j = 0; j < antKolonner; j++) {
                Celle celle = rutene[i][j];
                if (celle.erLevende()) {
                    antLevendeCeller++;
                }
            }
        }

        return antLevendeCeller;
    }
}

```


Verden.java:
```java
// Klasse Verden
public class Verden {
    Rutenett rutenett;
    int antRader;
    int antKolonner;
    int genNr = 0;

    // Konstruktoer oppretter, fyller og kobler sammen et rutenett med celler
    public Verden(int antRader, int antKolonner) {
        this.antRader = antRader;
        this.antKolonner = antKolonner;
        rutenett = new Rutenett(antRader, antKolonner);
        rutenett.fyllMedTilfeldigeCeller();
        rutenett.kobleAlleCeller();
    }

    // Tegn rutenett og print info i terminalvindu
    public void tegn() {
        // clearer terminalvindu
        System.out.println();
        System.out.print("\033[H\033[2J");
        System.out.flush();

        System.out.println("Generasjon nr. " + genNr + ":");
        rutenett.tegnRutenett();
        System.out.println("Det er " + rutenett.antallLevende() + " levende celler.");

    }

    // Oppdaterer rutenettet
    public void oppdatering() {
        // Teller levende naboer for hver celle
        for (int i = 0; i < antRader; i++) {
            for (int j = 0; j < antKolonner; j++) {
                Celle celle = rutenett.hentCelle(i, j);
                celle.tellLevendeNaboer();
            }
        }

        // Oppdaterer status for hver celle
        for (int i = 0; i < antRader; i++) {
            for (int j = 0; j < antKolonner; j++) {
                Celle celle = rutenett.hentCelle(i, j);
                celle.oppdaterStatus();
            }
        }

        genNr++;
    }
}

```

Her er GameOfLife.java filen, som IKKE skal brukes, men det er dette spillet vi
vil ende opp med, bare i GUI versjon istedet for terminal versjon.
GameOfLife.java:
```java
import java.util.Scanner;

// Klasse GameOfLife
public class GameOfLife {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    System.out.println("Antall rader:");
    int antRader = scanner.nextInt();

    System.out.println("Antall kolonner");
    int antKolonner = scanner.nextInt();

    Verden verden = new Verden(antRader, antKolonner);
    verden.tegn();

    boolean fortsette = true;
    while (fortsette) {
      System.out.println("Fortsette? ['enter'/n]:");
      String input = scanner.nextLine();

      if (input == "") {
        verden.oppdatering();
        verden.tegn();
      } else {
        fortsette = false;
      }
    }
  }
}

```


