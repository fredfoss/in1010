Hei, kan du forbedre dette programmet litt. Jeg vil at tidsIntervall skal
bestemme tiden mellom hver oppdatering av rutenettet med cellene. Jeg vil også
ha  Gjør også slik at gui-en endrer størrelse relativt
til plassen den har på skjermen. Ikke endre på Celle.java, Rutenett.java eller
Verden.java. Bare print ut de nye filene.

Her er filene:

Celle.java:
```
// Klasse Celle
public class Celle {
  boolean levende;
  Celle[] naboer = new Celle[8];
  int antNaboer = 0;
  int antLevendeNaboer = 0;

  // Konstruktor
  public Celle() {
    levende = false;
  }

  // Sett status til død
  public void settDoed() {
    levende = false;
  }

  // Sett status til død
  public void settLevende() {
    levende = true;
  }

  // Sjekk om celle lever
  public boolean erLevende() {
    return levende;
  }

  // Hent status-tegn
  public char hentStatusTegn() {
    if (levende) {
      return 'O';
    } else {
      return '.';
    }
  }

  // Legg til nabocelle
  public void leggTilNabo(Celle celle) {
    boolean lagtTil = false;
    for (int i = 0; i < 8; i++) {
      if (!lagtTil && naboer[i] == null) {
        naboer[i] = celle;
        antNaboer++;
        lagtTil = true;
      }
    }
  }

  // Tell antall levende naboceller
  public void tellLevendeNaboer() {
    int teller = 0;
    for (Celle i : naboer) {
      if (i != null) {
        if (i.erLevende()) {
          teller++;
        }
      }
    }
    antLevendeNaboer = teller;
  }

  // Oppdater cellens status
  public void oppdaterStatus() {
    if (antLevendeNaboer == 3) {
      levende = true;
    } else if (antLevendeNaboer != 2) {
      levende = false;
    }
  }
}
```


Rutenett.java:
```
// Klasse Rutenett
public class Rutenett {
  int antRader;
  int antKolonner;
  Celle[][] rutene;

  // Konstruktor
  public Rutenett(int antRader, int antKolonner) {
    this.antRader = antRader;
    this.antKolonner = antKolonner;
    rutene = new Celle[antRader][antKolonner];
  }

  // Lager celle og legger til i rutenettet
  public void lagCelle(int rad, int kolonne) {
    Celle celle = new Celle();

    // 1/3 sjanse for at cellen lever
    if (Math.random() <= 0.333) {
      celle.settLevende();
    }

    rutene[rad][kolonne] = celle;
  }

  // Legg til tilfeldige celler i rutenettet
  public void fyllMedTilfeldigeCeller() {
    for (int i = 0; i < antRader; i++) {
      for (int j = 0; j < antKolonner; j++) {
        lagCelle(i, j);
      }
    }
  }

  // Returner en celle hvis koordinatene gitt finnes
  public Celle hentCelle(int rad, int kolonne) {
    if ((rad > -1 && rad < antRader) && (kolonne > -1 && kolonne < antKolonner)) {
      Celle celle = rutene[rad][kolonne];
      return celle;
    } else {
      return null;
    }
  }

  // Skriver ut rutenettet til terminal
  public void tegnRutenett() {

    for (int i = 0; i < antRader; i++) {
      System.out.print("+---");
    }

    System.out.println("+");
    for (int i = 0; i < antRader; i++) {
      System.out.print("| ");
      for (int j = 0; j < antKolonner; j++) {
        Celle myBroCelle = rutene[i][j];
        System.out.print(myBroCelle.hentStatusTegn());
        System.out.print(" | ");
      }

      System.out.println();
      for (int k = 0; k < antRader; k++) {
        System.out.print("+---");
      }

      System.out.println("+");
    }
  }

  // Sett alle naboene til en celle
  public void settNaboer(int rad, int kolonne) {
    Celle celle = rutene[rad][kolonne];
    for (int i = -1; i < 2; i++) {
      for (int j = -1; j < 2; j++) {
        if (i != 0 || j != 0) {
          Celle nabocelle = hentCelle(rad + i, kolonne + j);
          if (nabocelle != null) {
            celle.leggTilNabo(nabocelle);
          }
        }
      }
    }
  }

  // Setter alle naboer til alle celler
  public void kobleAlleCeller() {
    for (int i = 0; i < antRader; i++) {
      for (int j = 0; j < antKolonner; j++) {
        settNaboer(i, j);
      }
    }
  }

  // Returner antall levende celler
  public int antallLevende() {
    int antLevendeCeller = 0;
    for (int i = 0; i < antRader; i++) {
      for (int j = 0; j < antKolonner; j++) {
        Celle celle = rutene[i][j];
        if (celle.erLevende()) {
          antLevendeCeller++;
        }
      }
    }

    return antLevendeCeller;
  }
}
```


Verden.java:
```
// Klasse Verden
public class Verden {
  Rutenett rutenett;
  int antRader;
  int antKolonner;
  int genNr = 0;

  // Konstruktoer oppretter, fyller og kobler sammen et rutenett med celler
  public Verden(int antRader, int antKolonner) {
    this.antRader = antRader;
    this.antKolonner = antKolonner;
    rutenett = new Rutenett(antRader, antKolonner);
    rutenett.fyllMedTilfeldigeCeller();
    rutenett.kobleAlleCeller();
  }

  // Tegn rutenett og print info i terminalvindu
  public void tegn() {
    // clearer terminalvindu
    System.out.println();
    System.out.print("\033[H\033[2J");
    System.out.flush();

    System.out.println("Generasjon nr. " + genNr + ":");
    rutenett.tegnRutenett();
    System.out.println("Det er " + rutenett.antallLevende() + " levende celler.");
  }

  // Oppdaterer rutenettet
  public void oppdatering() {
    // Teller levende naboer for hver celle
    for (int i = 0; i < antRader; i++) {
      for (int j = 0; j < antKolonner; j++) {
        Celle celle = rutenett.hentCelle(i, j);
        celle.tellLevendeNaboer();
      }
    }

    // Oppdaterer status for hver celle
    for (int i = 0; i < antRader; i++) {
      for (int j = 0; j < antKolonner; j++) {
        Celle celle = rutenett.hentCelle(i, j);
        celle.oppdaterStatus();
      }
    }

    genNr++;
  }
}
```


View.java:
```
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

// Klasse View
public class View extends JFrame implements ActionListener {
  private static final long serialVersionUID = 1L;
  private final int CELLE_STORRELSE = 10;
  private Verden verden;
  private JPanel rutenettPanel;
  private JButton startStoppKnapp;
  private JButton avsluttKnapp;
  private Timer timer;
  private int tidsintervall;

  // Konstruktor
  public View(Verden verden, int tidsintervall) {
    this.verden = verden;
    this.tidsintervall = tidsintervall;
    setTitle("Game of Life");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setResizable(false);

    // Opprett rutenett-panel
    rutenettPanel = new JPanel(new GridLayout(verden.antRader, verden.antKolonner));
    rutenettPanel.setPreferredSize(
        new Dimension(verden.antKolonner * CELLE_STORRELSE, verden.antRader * CELLE_STORRELSE));
    rutenettPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

    // Legg til celler i rutenett-panel
    for (int i = 0; i < verden.antRader; i++) {
      for (int j = 0; j < verden.antKolonner; j++) {
        Celle celle = verden.rutenett.hentCelle(i, j);
        JPanel cellePanel = new JPanel();
        cellePanel.setPreferredSize(new Dimension(CELLE_STORRELSE, CELLE_STORRELSE));
        cellePanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        if (celle.erLevende()) {
          cellePanel.setBackground(Color.BLACK);
        } else {
          cellePanel.setBackground(Color.WHITE);
        }
        cellePanel.addMouseListener(
            new MouseAdapter() {
              @Override
              public void mouseClicked(MouseEvent e) {
                int rad = e.getY() / CELLE_STORRELSE;
                int kolonne = e.getX() / CELLE_STORRELSE;
                Celle celle = verden.rutenett.hentCelle(rad, kolonne);
                celle.settLevende();
                oppdaterRutenett();
              }
            });
        rutenettPanel.add(cellePanel);
      }
    }

    // Opprett knapp-panel
    JPanel knappPanel = new JPanel();
    startStoppKnapp = new JButton("Start");
    startStoppKnapp.addActionListener(this);
    avsluttKnapp = new JButton("Avslutt");
    avsluttKnapp.addActionListener(this);
    knappPanel.add(startStoppKnapp);
    knappPanel.add(avsluttKnapp);

    // Legg til paneler i vindu
    add(rutenettPanel);
    add(knappPanel, "South");
    pack();
    setLocationRelativeTo(null);

    // Opprett timer for oppdatering av rutenett
    timer = new Timer(tidsintervall, this);
  }

  // Oppdater rutenett-panel med oppdatert verden
  public void oppdaterRutenett() {
    for (int i = 0; i < verden.antRader; i++) {
      for (int j = 0; j < verden.antKolonner; j++) {
        Celle celle = verden.rutenett.hentCelle(i, j);
        JPanel cellePanel = (JPanel) rutenettPanel.getComponent(i * verden.antKolonner + j);
        if (celle.erLevende()) {
          cellePanel.setBackground(Color.BLACK);
        } else {
          cellePanel.setBackground(Color.WHITE);
        }
      }
    }
  }

  // ActionListener metode for knappetrykk og timer
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == startStoppKnapp) {
      if (timer.isRunning()) {
        timer.stop();
        startStoppKnapp.setText("Start");
      } else {
        timer.start();
        startStoppKnapp.setText("Stopp");
      }
    } else if (e.getSource() == avsluttKnapp) {
      System.exit(0);
    } else if (e.getSource() == timer) {
      verden.oppdatering();
      oppdaterRutenett();
    }
  }
}
```


Controller.java:
```
// Klasse Controller
public class Controller {
  private Verden verden;
  private View view;

  // Konstruktor
  public Controller(Verden verden, View view) {
    this.verden = verden;
    this.view = view;
    view.setVisible(true);
  }
}


Hovedprogram.java:
// Klasse Hovedprogram
public class Hovedprogram {
  public static void main(String[] args) {
    int antRader = 50;
    int antKolonner = 50;
    int tidsIntervall = 2000;
    Verden verden = new Verden(antRader, antKolonner);
    View view = new View(verden, tidsIntervall);
    Controller controller = new Controller(verden, view);
  }
}
```



Gjør sånn at man kan trykke på en celle til enhver tid for å 'toggle'
den mellom død og levende.
